#!/usr/bin/env python3

# This file is part of pre.di.c
# pre.di.c, a preamp and digital crossover
# Copyright (C) 2018 Roberto Ripio
#
# pre.di.c is based on FIRtro https://github.com/AudioHumLab/FIRtro
# Copyright (c) 2006-2011 Roberto Ripio
# Copyright (c) 2011-2016 Alberto Miguélez
# Copyright (c) 2016-2018 Rafael Sánchez
#
# pre.di.c is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pre.di.c is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with pre.di.c.  If not, see <https://www.gnu.org/licenses/>.

"""
    Starts and stops Mplayer for CDDA playback.

    Also used to CD play control and disk eject.

    Usage:      CDDA  start   [track] - Loads Mplayer for CDDA
                      stop            - KILLS this script

                      control_play [track]
                      control_pause
                      control_prev
                      control_next
                      control_stop
                      control_eject
"""

import os
HOME = os.path.expanduser("~")

import sys
import time
import subprocess as sp
import threading

import basepaths as bp
import getconfigs as gc
import predic as pd

# --- Script settings ---
# Name used from pre.di.c. for info and pid saving
program_alias = 'mplayer-dvb'

# --- Mplayer options ---
# -quiet: see channels change
# -really-quiet: silent
options = '-quiet -nolirc'
# Mplayer input commands fifo filename
input_fifo = f'{bp.main_folder}/cdda_fifo'
# Mplayer path:
mplayer_path = '/usr/bin/mplayer'
# Mplayer outputs redirected to:
mplayer_redirection_path = f'{bp.main_folder}/.cdda_events'

# --- Some info about Mplayer SLAVE commands ---

# loadfile cdda://A-B:S     play tracks from A to B at speed S

# get_property filename     get the tracks to be played as 'A' (single track)
#                           or 'A-B' (range of tracks)

# get_property chapter      get the current track index inside the filename property (first is 0)

# seek_chapter 1            go to next track
# seek_chapter -1           go to prev track

# seek X seconds


def control_play(track_num=1):

    try:
        print( f'(init/CDDA) trying to load track #{track_num}' )
        # The whole address after 'loadfile' needs to be SINGLE quoted to load properly
        command = ('loadfile \'cdda://' + str(track_num)  + '-100:1\'\n' )
        #print(command) # debug
        f = open( input_fifo, 'w')
        f.write(command)
        f.close()
        return True
    except:
        print( f'(init/CDDA) failed to load track \#\'{track_num}\'' )
        return False


def control_seek(step=1):
    try:
        command = ('seek_chapter ' + str(step) + '\n' )
        f = open( input_fifo, 'w')
        f.write(command)
        f.close()
        return True
    except:
        print( f'(init/CDDA) failed to change track' )
        return False

def control_toggle():
    try:
        command = ('pause\n' )
        f = open( input_fifo, 'w')
        f.write(command)
        f.close()
        return True
    except:
        print( f'(init/CDDA) failed to toggle pause' )
        return False


def control_stop():
    try:
        command = ('stop\n' )
        f = open( input_fifo, 'w')
        f.write(command)
        f.close()
        return True
    except:
        print( f'(init/CDDA) failed to stop playing' )
        return False

def control_eject():
    control_stop()
    os.system( 'eject' )


def start():

    # 1. Prepare a jack loop where MPLAYER outputs can connect.
    #    The jack_loop module will keep the loop alive, so we need to thread it.
    jloop = threading.Thread( target = pd.jack_loop, args=('cdda_loop',) )
    jloop.start()

    # 2. Launching Mplayer for CDDA service:
    opts = f'{options} -idle -slave -profile cdda -input file={input_fifo} -cache 2048'
    command = f'{mplayer_path} {opts}'
    with open(mplayer_redirection_path, 'w') as redir:
        pd.start_pid(command, program_alias, redir)

def stop():
    pd.kill_pid(program_alias)
    # harakiri
    sp.Popen( ['pkill', '-KILL', '-f', 'profile cdda'] )
    sp.Popen( ['pkill', '-KILL', '-f', 'CDDA start'] )


if __name__ == '__main__':

    ### Reading the command line
    if sys.argv[1:]:

        opc = sys.argv[1]

        # STARTS the script and optionally starts playing a track number
        if opc == 'start':
            start()
            if sys.argv[2:]:
                opc2 = sys.argv[2]
                if opc2.isdigit():
                    control_play( int(opc2) )

        # STOPS (KILLS) all this stuff
        elif opc == 'stop':
            stop()

        # CONTROLLING PLAYING
        elif opc == 'control_play':
            if sys.argv[2:]:
                opc2 = sys.argv[2]
                if opc2.isdigit():
                    control_play( int(opc2) )
            else:
                control_play()

        elif opc == 'control_toggle' or opc=='control_pause':
            control_toggle()

        elif opc == 'control_prev':
            control_seek(-1)

        elif opc == 'control_next':
            control_seek(1)

        elif opc == 'control_stop':
            control_stop()

        elif opc == 'control_eject':
            control_eject()

        else:
            print( '(init/DVB) Bad option' )

    else:
        print(__doc__)
